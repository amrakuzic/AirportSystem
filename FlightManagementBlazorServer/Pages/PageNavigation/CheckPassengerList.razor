@page "/CheckPassengers/{FlightId}"
@using System.Text
@inject PassengerService _passengerService;
@inject DocumentService _documentService;
@inject FlightService _flightService;
@inject Data.LoginState loginState;
<link href="/css/listPages.css" rel="stylesheet" />
@inject NavigationManager _navigationManager;



@if(Passengers != null && loginState.IsLoggedIn == true)
{
    <h3>Check Passengers For Flight @Flight.Number</h3>
    <table class="table table-dark">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Gender</th>
                <th>Seat</th>
                <th>Document</th>
                <th>Checked</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var passenger in Passengers)
            {
                if(passenger.FlightId == int.Parse(FlightId))
                {
                    <tr>
                        <td>@passenger.FirstName</td>
                        <td>@passenger.LastName</td>
                        <td>@passenger.Gender</td>          
                        <td ><EditForm Model="@passenger"><InputText id="passengerSeat" @bind-Value="@passenger.Seat" class="form-control-sm" style="width: 30%"></InputText></EditForm></td>
                        <td>
                            <Tooltip Text="Add Document">
                                <button type="button" class="btn btn-dark" @onclick="() => OpenAddDocumentDialog(passenger)">
                                    <span class="oi oi-document"></span>
                                </button>
                            </Tooltip>
                        </td>                        
                        <td><input type="checkbox" @bind-value="IsChecked" /></td>

                        <td>
                            <Tooltip Text="Check Passenger">
                                <button type="button" class="btn btn-success" @onclick="() => CheckPassenger(passenger)">
                                    <span class="oi oi-check"></span>
                                </button>
                            </Tooltip>
                        </td>
                    </tr>                    
                }
            }  
        </tbody>
    </table>
}
else
{
    <div>Loading...</div>
}
<NotificationDialog @ref="NotificationDialog" Description="@UnsuccessfulCheck"></NotificationDialog>
<AddDocumentDialog @ref="AddDocumentDialog" OnDoneCallback="OnModalDone"></AddDocumentDialog>
@code {
    public int SelectedPassengerId{ get; set; }
    private List<Passenger> Passengers;
    public Passenger Passenger { get; set; }
    [Parameter]
    public string FlightId{ get; set; }

    public Flight Flight{ get; set; }
    public string UnsuccessfulCheck { get; set; }
    public Document Document { get; set; }
    public AddDocumentDialog AddDocumentDialog { get; set; }
    public bool IsChecked { get; set; }
    public NotificationDialog NotificationDialog{ get; set; }
    protected override async Task OnInitializedAsync()
    {
        //dohvatiti putnike sa stranim kljucem od pritisnutog leta
        Passengers = await _passengerService.GetPassengersAsync();
        Flight = await _flightService.GetFlightAsync(int.Parse(FlightId));
    }
    private void OpenAddDocumentDialog(Passenger passenger)
    {
        AddDocumentDialog.Show(passenger);
    }

    private void OnModalDone(Document document)
    {
        Document = document;
    }

    private async Task CheckPassenger(Passenger passenger)
    {
        var errors = ValidateCheckPassenger(passenger);
        errors = errors.Remove(errors.Length - 1);
        if(errors.Length<15)
        {
            passenger.IsChecked = true;
            await _passengerService.UpdatePassengerAsync(passenger);
            Passengers = await _passengerService.GetPassengersAsync();
            //mozda ovdje tek dodati document u bazu dokumenata
            await _documentService.AddDocumentAsync(Document);

        }
        else
        {
            UnsuccessfulCheck = errors;
            NotificationDialog.Show();
        }

    }

    private string ValidateCheckPassenger(Passenger passenger)
    {
        var validationErrors = "Please add:";
        if (IsChecked == false)
            validationErrors += "checkBox activation,";
        if (String.IsNullOrWhiteSpace(passenger.Seat))
            validationErrors += "seat,";
        if (Document == null)
            validationErrors += "document,";
        return validationErrors;
    }

    private string GetConcatenatedValidationErrors(List<ValidationError> ValidationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach(var error in ValidationErrors)
        {
            if (message.Length == 0)
                message.Append(error.Description);
            else
                message.Append($"{Environment.NewLine} {error.Description}");

        }
        return message.ToString();
    }

    private void ChangeCheckBoxState()
    {
        IsChecked = !IsChecked;
    }

}
